.. Describes the implementation of the Kernel

Kernel Main Features
====================

.. image:: ../images/Class_Ecos_p_v3.png
   :alt: Ecos_p Classes

A simple representation of the classes implementation




MVC and Dependency Injection 
-----------------------------

The implementation is based in two design principles:

* **MVC (Model-View-Control)** - We separate the model, control and view componentes in the implementation. The modules: model, basicAgents, basicSpaces, etc, are the **model** part of the framework. The modules Simulation and BasicSchedule are responsible for the **control** component and the modules Interface and BasicObserver are responsible for the **view** part.

* **Dependency Injection** - Is used to create the objects in the model. The *Agents*, the *Spaces*, the *Observers* and the *Schedule* are all created using a *json* file. This file also contains all the necessary information for the initialization of the model, like, the number of agents of each type, the spaces, the intialization of the variables of the agents, the variables that will be observed, etc.  The idea is to flexibilize the construcion of scenarios and models based in the same set of classes. These classes can be initialized using the information contained in the json file and we can define each scenario initialization in this file.


Creating a Model
----------------

The creation of a model is done in the *models* folder, in the Ecos_p or in other folder depending on the modeller preferences. The paths to the kernel and model, are defined in a *model_config.json* in the model folder.


.. image:: ../images/Structure_Ecos_p.png
   :alt: Graphical Representation of the Kernel and App components of the framework

A model is composed of three modules:

* **The agents module** (that can be specialised using submodules) - that contains the definitions of the agents, its variables (compatible with the json file of the definition of the agents) and its behaviour, defined in a method named *step*. The step method is called by a *schedule* object that controls the execution of the agent step, the space updades and the observers *observation* method. An agent in a discrete event simulation is a subclass of **DiscreteEventAgent**

* **The action_set module** - that contains the agents *actions*, the idea behind to separate the agents actions and behavior is that one can implement multiple action sets for new methods representing actions of the agent without interference in the agent code.

* **The Space module** - that contains the model *spaces*. The spaces are the way the agents interact. In a canonical simulation model the agents send a message to a space, and this space updates the information for the agents an treat the interactions between the agents in the method *update* that in executed by the schedule, after the execution of the agent steps.
  
Executing a Simulation
----------------------

.. image:: ../images/Execucao.png
   :alt: Simulation Execution

The execution of a simulation


The simulation module

The model module

The basicSchedule module

The basicSpaces module

The basicAgents module

The basicObservers module

