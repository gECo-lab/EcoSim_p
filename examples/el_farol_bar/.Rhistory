download.packages("vcd")
.libPaths()
q()
load("~/Dropbox/Workspace_Current/Databases/Lancaster/HHDb/Food-Security-Amazonia/3.ProcessedData/1_demography.RData")
load("~/Dropbox/Workspace_Current/Databases/Lancaster/HHDb/Food-Security-Amazonia/3.ProcessedData/1_demography.RData")
View(demo)
data("Population")
data("population")
data("uspop")
install.packages('tidyverse')
library(tidyr)
data("population")
source('~/Dropbox/Workspace_Current/Projects/EmExec/Banpara/Cursos/git_curso/curso_intro_datascience/Apostilas/aux/InstalaPacotes.R', echo=TRUE)
library(dplyr)
library(ggplot2)
data("iris")
g1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point() +
ggtitle("Relação entre tamanho da Pétala e o tamanho da Sépala") +
labs(x="Tamanho da Sépala", y="Tamanho da Pétala")
plot(g1)
sessionInfo()
sessionInfo()
View(iris)
library(dplyr)
library(ggplot2)
data("iris")
g1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point() +
ggtitle("Relação entre tamanho da Pétala e o tamanho da Sépala") +
labs(x="sTamanho da Sépala", y="Tamanho da Pétala")
plot(g1)
install.packages("shiny")
source('~/Dropbox/Workspace_Current/Projects/EmExec/Banpara/Cursos/git_curso/curso_intro_datascience/Apostilas/aux/InstalaPacotes.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
options(digits = 2)
distancias$meion <- as.integer(distancias$meiof)
x <- 2
class(x)
y <- 2:450
class(y)
y
x
y <- 2:4
x
y
x(1)
x[1]
x[2]
x[2] <- 5
x
class(x)
x[3:5] <- 3:5
x
z = [1,3,4;5,7,3]
z = [1,3,4,5,7,3]
z = 1,3,4;5,7,3
z = c(1,3,4;5,7,3)
z = c(1,3,4,5,7,3)
z
class(z)
z = c("1","3","4","5","7","3")
z
class(z)
z = c("1","3",4,5,"7","3")
z
z = c("1",3,4,5,7,3)
z
d = as.Date("2019.09.23")
d = as.Date("2019-09-23")
d
class(d)
f = as.factor()
f = as.factor(c("sim", "nao"))
f
x = 100
x
x <- 120
x
x <- 1:50
x
x <- c(1,2,3,4,5,6,7,8,9,10)
x
x[1]
x[5]
x = 10
y = "5"
x+y
x = "10"
x+y
x = 10
y = 5
x+y
x = 1:10
y = 12:22
x+y
x[2]+y[5]
x
y
class(x)
class(y)
z = 2.5
class(z)
x + z
a <- 2
a
x
2*x
x^2
a <- c(1,3500,5.3,543,-2,4000)
a
c <- c(FALSE,TRUE,FALSE,TRUE)
c
a
class(c)
class(a)
f = as.factor(c)
f
w = c("sim", "sim", "não", "não", "não", "talvez")
w
class(2)
class(w)
w = as.factor(w)
w
class(w)
x = matrix(1:16, nrow=4,ncol=4)
x
class(x)
x[2,3]
x[2,4]
load("~/Dropbox/Workspace_Current/Databases/ANA/Estacoes/3_Tratados/Cotas.RData")
View(Cotas)
class(Cotas)
class(Cotas$Cota27)
class(Cotas$Cota01Status)
class(Cotas$Data)
cubo <- array(data=1:27, dim=c(3,3,3))
cubo
cubo <- array(data=1:27, dim=c(3,3,3,2))
cubo
dim(cubo)
27*2
cubo <- array(data=1:54, dim=c(3,3,3,2))
cubo
cubo[1,1,2,2]
hipercubo <- array(data=1:54, dim=c(3,3,3,2))
hipercubo[1,2,2,2]
hipercubo[2,2,2,2]
hipercubo[3,2,2,2]
hipercubo[3,2,3,2]
hipercubo[3,2,3,3]
class(Cotas)
names(Cotas)
mtcars
names(mtcars)
mtcars$mpg
class(mtcars$mpg)
class(mtcars$carb)
str(mtcars)
iris
names(iris)
str(iris)
DATA <- c("ago/2018", "set/2018", "out/2018", "nov/2018", "dez/2018", "jan/2019")
DATA
class(DATA)
IPCA <- c(-0.09, 0.48, 0.45, -0.21, 0.15, 0.32)
class(IPCA)
PIBmensalMilhoes <- c(583011.3, 551215.6, 597218.7, 604073.9, 624464.1, 591715.7)
class(PIBmensalMilhoes)
lista = cbind(DATA, IPCA, PIBmensalMilhoes)
class(lista)
lista
class(lista)
meudf = data.frame(lista)
str(meudf)
meuOutrodf = data.frame(DATA, IPCA, PIBmensalMilhoes)
str(meuOutrodf)
meuOutrodf$DATA = as.character(meuOutrodf$DATA)
str(meuOutrodf)
summary(meuOutrodf)
setwd("~/Dropbox/Workspace_Current/Projects/Applications/EcoSim/EcoSim_p/src/EcoSim_p/Ecos_p/examples/el_farol_bar_model/runs")
ls()
dir()
dir()$mtime
system("ls -t|head -n1")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
last_simulation_file <- system("ls -t|head -n1")
sim_results <- read.csv(last_simulation_file)
last_simulation_file <- system("ls -t|head -n1")
sim_results <- read.csv(last_simulation_file, intern = TRUE)
last_simulation_file <- system("ls -t|head -n1", intern = TRUE)
sim_results <- read.csv(last_simulation_file)
setwd("~/Dropbox/Workspace_Current/Projects/Applications/EcoSim/EcoSim_p/src/EcoSim_p/Ecos_p/examples/el_farol_bar_model")
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
sim_results <- read.csv(last_simulation_file)
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
sim_results <- sim_results[-1]
View(sim_results)
sim_results <- sim_results[-1,]
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
sim_results <- sim_results[-1,]
View(sim_results)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results_0 <- read.csv(file.path(runs_dir,last_simulation_file))
View(sim_results)
View(sim_results)
View(sim_results_0)
View(sim_results_0)
View(sim_results_0)
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
attendance <- sim_results %>% group_by(run, step, my_play) %>%
count(my_play)
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness)) + geom_density()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
mean(predictor_fitness)
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE)
)
ggplot(predictors, aes(x = step, y = fitness, color = selected_predictor)) + geom_line()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE)
)
ggplot(predictors, aes(x = step, y = fitness, color = log(selected_predictor)) + geom_line()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE)
)
ggplot(predictors, aes(x = step, y = fitness, color = log(selected_predictor))) + geom_line()
ggplot(predictors, aes(x = step, y = fitness, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = log(fitness), color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = n, color = selected_predictor)) + geom_line()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE),
n = n()
)
ggplot(predictors, aes(x = step, y = log(fitness), color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = median_prediction, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = n, color = selected_predictor)) + geom_line()
View(attendance)
x = pivot_wider(attendance, names_from = my_play, values_from = n)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>% mutate(last_going = lag(going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- mutate(frequencies, last_going = lag(going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_new <- mutate(frequencies, last_going = lag(going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>% group_by(step) %>%
mutate(frequencies, last_going = lag(going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>% group_by(step) %>%
mutate(last_going = lag(going))
View(frequencies)
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>% group_by(step) %>%
mutate(last_going = lag(going, default = 0))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>%
mutate(last_going = dplyr::lag(going, default = 0))
frequencies <- frequencies %>%
mutate(last_going = dplyr::lag(going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- frequencies %>%
mutate(last_going = dplyr::lag(going, na.rm = TRUE))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies[, last_going = rowShift(going, -1)]
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies[, last_going = c(NA, going[ .I -1]) ]
frequencies_df[, last_going = c(NA, going[ .I -1]) ]
frequencies_df <- as.data.frame(frequencies)
frequencies_df[, last_going = c(NA, going[ .I -1]) ]
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_df <- as.data.frame(frequencies)
frequencies_df[, last_going = shift(going) ]
frequencies_df[, last_going = shift(going) ]
frequencies_df[, last_going := shift(going) ]
frequencies_df[, last_going <- shift(going) ]
install.packages("data.table")
library(data.table)
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_df <- as.data.frame(frequencies)
frequencies_df[, last_going = shift(going) ]
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_df <- as.data.frame(frequencies)
frequencies_df$last_going = shift(frequencies_df$going, fill = NA, type = lag)
frequencies_df$last_going = shift(frequencies_df$going, fill = NA, type = "lag")
View(frequencies_new)
View(frequencies_df)
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(fill = density)
ggplot(frequencies_df, aes(going, last_going)) + geom_raster()
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = going))
frequencies_df$last_not_going = shift(frequencies_df$not_going, fill = NA, type = "lag")
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_raster(aes(fill = not_going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_contour(aes(fill = not_going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_contour(aes(z = not_going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_raster(aes(fill = not_going))
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
attendance <- sim_results %>% group_by(run, step, my_play) %>%
count(my_play)
ggplot(data=subset(attendance, my_play == "GOING"), aes(x = step, y = n)) + geom_line()
ggplot(data=attendance, aes(x = n, color = my_play)) + geom_density()
ggplot(data=attendance, aes(x = my_play, y = n)) + geom_boxplot()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE),
n = n()
)
ggplot(predictors, aes(x = step, y = log(fitness), color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = median_prediction, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = n, color = selected_predictor)) + geom_line()
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_df <- as.data.frame(frequencies)
frequencies_df$last_going = shift(frequencies_df$going, fill = NA, type = "lag")
frequencies_df$last_not_going = shift(frequencies_df$not_going, fill = NA, type = "lag")
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_raster(aes(fill = not_going))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
library(tidyverse)
library(data.table)
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
attendance <- sim_results %>% group_by(run, step, my_play) %>%
count(my_play)
ggplot(data=subset(attendance, my_play == "GOING"), aes(x = step, y = n)) + geom_line()
ggplot(data=attendance, aes(x = n, color = my_play)) + geom_density()
ggplot(data=attendance, aes(x = my_play, y = n)) + geom_boxplot()
ggplot(data=subset(attendance, my_play == "GOING"), aes(x = step, y = n)) + geom_line()
ggplot(data=attendance, aes(x = n, color = my_play)) + geom_density()
ggplot(data=attendance, aes(x = my_play, y = n)) + geom_boxplot()
ggplot(data=attendance, aes(x = my_play, y = n)) + geom_violinplot()
ggplot(data=attendance, aes(x = my_play, y = n)) + geom_violin()
ggplot(sim_results, aes(color = selected_predictor, x=log(predictor_fitness))) + geom_density()
predictors <- sim_results %>% group_by(run, step, selected_predictor) %>%
summarise(fitness = mean(predictor_fitness, na.rm = TRUE),
mean_prediction = mean(predictor_prediction, na.rm = TRUE),
median_prediction = median(predictor_prediction, na.rm = TRUE),
n = n()
)
ggplot(predictors, aes(x = step, y = log(fitness), color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))+ geom_line() + facet_grid(rows = selected_predictor)
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))+ geom_line() + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor))
+ geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction, ymax = mean_prediction, group = selected_predictor )) + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 1, ymax = mean_prediction + 1 , group = selected_predictor )) + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10 , group = selected_predictor )) + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10 )) + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10), fill = "grey70") + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, fill = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10), fill = "grey70") + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70") + facet_grid(rows = vars(selected_predictor))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + facet_grid(rows = vars(selected_predictor)) + geom_line() + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, fill = selected_predictor)) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(predictors, aes(x = step, y = median_prediction, fill = factor(selected_predictor)) + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, fill = factor(selected_predictor))) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, fill = factor(selected_predictor))) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(predictors, aes(x = step, y = mean_prediction, color = factor(selected_predictor))) + facet_grid(rows = vars(selected_predictor)) + geom_ribbon(aes(ymin = mean_prediction - 10, ymax = mean_prediction + 10, group = selected_predictor), fill = "grey70")  + geom_line()
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = "density""))
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = density))
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = density))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_raster(aes(fill = not_going))
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies <- pivot_wider(attendance, names_from = my_play, values_from = n)
freq_names = c("run", "step", "going","not_going")
colnames(frequencies)  <-  freq_names
frequencies_df <- as.data.frame(frequencies)
frequencies_df$last_going = shift(frequencies_df$going, fill = NA, type = "lag")
frequencies_df$last_not_going = shift(frequencies_df$not_going, fill = NA, type = "lag")
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = density))
ggplot(frequencies_df, aes(going, last_going)) + geom_raster(aes(fill = going))
ggplot(frequencies_df, aes(going, last_going)) + geom_tile(aes(fill = going))
ggplot(frequencies_df, aes(going, last_going, fill=not_going)) + geom_tile(aes())
View(attendance)
ggplot(attendance, aes(step, n, fill=my_play)) + geom_tile()
ggplot(attendance, aes(run, n, fill=my_play)) + geom_tile()
ggplot(attendance, aes(run, step, fill = n)) + geom_tile()
ggplot(attendance, aes(run, step, fill = my_play, )) + geom_tile()
ggplot(attendance, aes(run, step, fill = my_play, )) + geom_raster()
ggplot(attendance, aes(run, step, fill = my_play, )) + geom_raster(fill = n)
ggplot(attendance, aes(run, step)) + geom_raster(fill = n)
ggplot(attendance, aes(run, n)) + geom_raster(fill = my_play)
ggplot(frequencies_df, aes(going, last_going)) + geom_tile(aes(fill = going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_raster(aes(fill = not_going))
ggplot(frequencies_df, aes(not_going, last_not_going)) + geom_tile(aes(fill = not_going))
ggplot(predictors, aes(x = step, y = mean_prediction, color = selected_predictor)) + geom_line()  + facet_grid(rows = vars(selected_predictor))
last_simulation_file <- system("ls -t runs/ |head -n1", intern = TRUE)
runs_dir = "runs/"
sim_results <- read.csv(file.path(runs_dir,last_simulation_file))
attendance <- sim_results %>% group_by(run, step, my_play) %>%
count(my_play)
ggplot(data=subset(attendance, my_play == "GOING"), aes(x = step, y = n)) + geom_line()
ggplot(data=subset(attendance, my_play == "GOING"), aes(x = step, y = n)) + geom_line() + geom_point()
View(sim_results)
ggplot(sim_results, aes(predictor_prediction, predictor_fitness, color = my_play)) + geom_point()
ggplot(sim_results, aes(predictor_prediction, predictor_fitness, color = selected_predictor)) + geom_point()
ggplot(sim_results, aes(predictor_prediction, predictor_fitness, color = selected_predictor)) + geom_point() + facet_grid(cols = vars(my_play))
ggplot(data=sim_results, aes(x = predictor_prediction, color = my_play)) + geom_density()
ggplot(data=sim_results, aes(x = predictor_prediction, color = selected_predictor)) + geom_density()
ggplot(data=sim_results, aes(x = predictor_fitness, color = selected_predictor)) + geom_density()
ggplot(data=sim_results, aes(x = log(predictor_fitness), color = selected_predictor)) + geom_density()
ggplot(data=sim_results, aes(x = predictor_prediction, color = my_play)) + geom_density()
ggplot(data=sim_results, aes(x = predictor_prediction, y = predictor_fitness, color = my_play)) + geom_point()
ggplot(data=sim_results, aes(x = predictor_prediction, y = predictor_fitness, color = my_play)) + geom_tile()
ggplot(data=sim_results, aes(x = predictor_prediction, y = predictor_fitness, color = my_play)) + geom_point()
ggplot(sim_results, aes(predictor_prediction, predictor_fitness, color = selected_predictor)) + geom_point() + facet_grid(cols = vars(my_play))
